" Vundle
call plug#begin('~/.vim/plugged')
" Nerdtree related
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
" Colorscheme
Plug 'vim-airline/vim-airline'
Plug 'joshdick/onedark.vim'
" fuzz
Plug 'ctrlpvim/ctrlp.vim'
" Coding Utils
" Plug 'Yggdroot/indentLine'
Plug 'luochen1990/rainbow'
if executable("node")
    Plug 'neoclide/coc.nvim', {'commit': 'bdf75ab'}
endif
Plug 'editorconfig/editorconfig-vim'
"
Plug 'udalov/kotlin-vim'
Plug 'jreybert/vimagit'
Plug 'tpope/vim-surround'
call plug#end()

" short custom config
set nocp nu rnu cul noswf sc nosmd
"set mouse=a
au WinEnter * setl cul
au WinLeave * setl nocul
set sb spr stal=2 ru
set cb=unnamed
set ts=4 sw=4 sts=4 et
set ai cin si sta
set hls sm is ic scs
set ls=2 so=5
set enc=utf-8 ff=unix
set wrap lbr
set re=0
" set viminfo='0,:0,<0,@0,f0
set viminfo="NONE"
set backspace=indent,eol,start
filetype plugin indent on

syntax enable
try
  colo onedark
catch
  colo torte
endtry
"set bg=dark
hi Normal guibg=NONE ctermbg=NONE
" transparent background
" let t:is_transparent_background=0
" fu! Change_Background()
"   if t:is_transparent_background == 0
"     hi Normal guibg=NONE ctermbg=NONE
"     let t:is_transparent_background=1
"   else
"     colors onedark
"     let t:is_transparent_background=0
"   endif
" endf
" nnoremap <F1> :call Change_Background()<CR>

"au BufRead,BufWritePre * if &modifiable | %retab!
"au InsertLeave,BufWritePre * %s/\s\+$//e

"set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
"set list

au Filetype c,cpp setlocal ts=4 sw=4 sts=4 et
au Filetype python setlocal ts=4 sw=4 sts=4 et
au Filetype javascript setlocal ts=2 sw=2 sts=2 et
au Filetype sh setlocal ts=2 sw=2 sts=2 et
au Filetype php setlocal ts=4 sw=4 sts=4 et

au BufRead,BufNewFile *.sage set filetype=python
au BufRead,BufNewFile *.conf set filetype=conf

au Filetype c,cpp  noremap <F9> <ESC>:w<CR>:!run_c '%'<CR>
au Filetype c,cpp inoremap <F9> <ESC>:w<CR>:!run_c '%'<CR>
au Filetype c,cpp  noremap <F10> <ESC>:w<CR>:!run_c '%' 2<CR>
au Filetype c,cpp inoremap <F10> <ESC>:w<CR>:!run_c '%' 2<CR>

au Filetype python  noremap <F5> <ESC>:% w !python3<CR>
au Filetype python inoremap <F5> <ESC>:% w !python3<CR>
au Filetype python  noremap <F9> <ESC>:w<CR>:!python3 '%'<CR>
au Filetype python inoremap <F9> <ESC>:w<CR>:!python3 '%'<CR>

au Filetype javascript  noremap <F5> <ESC>:% w !node<CR>
au Filetype javascript inoremap <F5> <ESC>:% w !node<CR>
au Filetype javascript  noremap <F9> <ESC>:w<CR>:!node '%'<CR>
au Filetype javascript inoremap <F9> <ESC>:w<CR>:!node '%'<CR>

au Filetype sh  noremap <F5> <ESC>:% w !zsh<CR>
au Filetype sh inoremap <F5> <ESC>:% w !zsh<CR>
au Filetype sh  noremap <F9> <ESC>:w<CR>:!zsh '%'<CR>
au Filetype sh inoremap <F9> <ESC>:w<CR>:!zsh '%'<CR>

au Filetype php  noremap <F5> <ESC>:% w !php -a<CR>
au Filetype php inoremap <F5> <ESC>:% w !php -a<CR>
au Filetype php  noremap <F9> <ESC>:w<CR>:!php '%'<CR>
au Filetype php inoremap <F9> <ESC>:w<CR>:!php '%'<CR>

au Filetype kotlin  noremap <F9> <ESC>:w<CR>:!run_kt '%'<CR>
au Filetype kotlin inoremap <F9> <ESC>:w<CR>:!run_kt '%'<CR>

noremap ; :
noremap <C-l> :nohl<CR>

" airline
let g:airline_powerline_fonts = 1
let g:airline_detect_modified=1
let g:airline_detect_paste=1
"let g:airline#extensions#tabline#enabled = 1

" NERDTree
noremap <C-n> :NERDTreeToggle<CR>
" autocmd VimEnter * if exists(":NERDTree") | NERDTree | wincmd p
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif " Close on exit
let NERDTreeMinimalUI=1
let NERDTreeShowHidden=1
" let NERDTreeChDirMode=3
let NERDTreeSortOrder=['\/$', '\.\(c\|cpp\|hpp\|py\|md\|sh\)$' , '*', '\.swp$',  '\.bak$', '\~$']
let NERDTreeIgnore=['\.o$', '\.lc$', '\.exe$']
let g:NERDTreeGitStatusUseNerdFonts = 1

" https://github.com/preservim/nerdtree/issues/815
" augroup nerdtree
"   autocmd!
"   autocmd FileType nerdtree syntax clear NERDTreeFlags
"   autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=ALL
"   autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\[" contained conceal containedin=ALL
"   autocmd FileType nerdtree setlocal conceallevel=1
"   autocmd FileType nerdtree setlocal concealcursor=nvic
" augroup END

" NERDCommenter
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
noremap <leader><leader> <Plug>NERDCommenterToggle

" CoC
if executable("node")
    let g:coc_global_extensions = ['coc-clangd', 'coc-pyright', 'coc-sh']

    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ CheckBackspace() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! CheckBackspace() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
endif

" Indent Guide
" let g:indentLine_setColors = 0
" let g:indentLine_char_list=['|', '¦', '┆', '┊']

" onedark colorscheme
let g:onedark_termcolors=256

" rainbow
let g:rainbow_active=1

" magit
autocmd User VimagitEnterCommit startinsert
